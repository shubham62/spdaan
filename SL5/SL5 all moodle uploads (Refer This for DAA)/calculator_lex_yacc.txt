//test.l

%{ 
#include<stdio.h> 
#include<stdlib.h> 
#include "y.tab.h" 
%} 

%% 
[0-9]+ {yylval.val=atoi(yytext);return NUM;} 
[+\-()*/] {return yytext[0];} 
[ \t\n] {;} 
%%



//test.y

%{ 
#include<stdio.h> 
#include<stdlib.h> 
extern int yylex(); 
void yyerror(char *msg); 
%} 

%union 
{ 
	int val; 
} 

%token NUM 
%type <val> E T F 
%type <val> NUM 

%% 
S : E {printf("%d",$1);} 
  ; 
E : E '+' T {$$=$1+$3;} 
  | E '-' T {$$=$1-$3;} 
  | T {$$=$1;} 
  ; 
T : T '*' F {$$=$1*$3;} 
  | T '/' F {$$=$1/$3;} 
  | F {$$=$1;} 
  ; 
F : '('E')' {$$=$2;} 
  | NUM {$$=$1;} 
  ; 
%% 

void yyerror(char *msg){ 
fprintf(stderr,"%s",msg); 
} 
int main(void) 
{ 
return yyparse(); 
}


//output


2 
* 
8 
Ans 16
2 
+ 
3 
Ans 5
8 
/ 
2 
Ans 4
17 
- 
7 
Ans 10

//how to run

yacc -d test.y

lex test.l

cc y.tab.c lex.yy.c -ll

./a.out

